// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entities "go-clean/entities"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Add provides a mock function with given fields: newData
func (_m *UserService) Add(newData entities.RequestUser) (entities.User, error) {
	ret := _m.Called(newData)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.RequestUser) entities.User); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.RequestUser) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deactive provides a mock function with given fields: userID
func (_m *UserService) Deactive(userID int) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsers provides a mock function with given fields:
func (_m *UserService) ListUsers() ([]entities.User, error) {
	ret := _m.Called()

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func() []entities.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyProfile provides a mock function with given fields: userID
func (_m *UserService) MyProfile(userID int) (entities.User, error) {
	ret := _m.Called(userID)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int) entities.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updatedData
func (_m *UserService) Update(updatedData entities.RequestUser) (entities.User, error) {
	ret := _m.Called(updatedData)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.RequestUser) entities.User); ok {
		r0 = rf(updatedData)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.RequestUser) error); ok {
		r1 = rf(updatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t testing.TB) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
