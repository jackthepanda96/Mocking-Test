// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entities "go-clean/entities"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UserRepository) GetAll() ([]entities.User, error) {
	ret := _m.Called()

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func() []entities.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepository) GetByID(id int) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newUser
func (_m *UserRepository) Insert(newUser entities.User) (entities.User, error) {
	ret := _m.Called(newUser)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateData
func (_m *UserRepository) Update(updateData entities.User) (entities.User, error) {
	ret := _m.Called(updateData)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(updateData)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t testing.TB) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
